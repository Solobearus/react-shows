{"version":3,"sources":["components/Header/Header.tsx","components/Tile/Tile.tsx","components/List/List.tsx","routes/Home.tsx","components/TileExtended/TileExtended.tsx","routes/Show.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","query","setQuery","className","role","type","placeholder","value","onChange","e","target","Tile","show","history","onClick","push","id","name","score","src","image","medium","alt","List","shows","map","key","Home","showsData","TileExtended","showData","genres","genre","runtime","Show","state","fetch","this","props","match","params","then","res","json","setState","React","Component","App","path","render","to","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8WASaA,G,MAA2B,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAE9C,OACI,yBAAMC,UAAU,UACZ,2BACIC,KAAK,QACLC,KAAK,SACLC,YAAY,SACZC,MAAON,EACPO,SAAU,SAACC,GAAD,OAAOP,EAASO,EAAEC,OAAOH,aCFtCI,G,MAAyB,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,QAC3C,OACI,yBAAMT,KAAK,SAASD,UAAU,OAAOW,QAAS,kBAAMD,EAAQE,KAAR,iBAAuBH,EAAKI,OAC5E,6BACKJ,EAAKI,IAEV,6BACKJ,EAAKK,MAEV,6BACKL,EAAKM,OAEV,6BACI,yBAAKC,IAAKP,EAAKQ,MAAQR,EAAKQ,MAAMC,OAAS,2DAA4DC,IAAI,SCrB9GC,G,MAAwB,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,MAAOX,EAAc,EAAdA,QAE3C,OAAO,yBAAKV,UAAU,QACjBqB,GAASA,EAAMC,KAAI,SAACb,GAAD,OAChB,kBAAC,EAAD,CACIC,QAASA,EACTa,IAAKd,EAAKI,GACVJ,KAAMA,UCHTe,EAAwB,SAAC,GAA6C,IAA3C1B,EAA0C,EAA1CA,MAAOC,EAAmC,EAAnCA,SAAU0B,EAAyB,EAAzBA,UAAWf,EAAc,EAAdA,QAChE,OACI,6BACI,kBAAC,EAAD,CAAQZ,MAAOA,EAAOC,SAAUA,IAChC,kBAAC,EAAD,CAAMsB,MAAOI,EAAWf,QAASA,MCThCgB,G,MAA4C,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACxD,OACI,yBAAM3B,UAAU,gBACZ,yBAAKA,UAAU,QACX,6BACK2B,EAASd,IAEd,6BACKc,EAASb,MAEd,wCACaa,EAASC,QAAUD,EAASC,OAAON,KAAI,SAACO,GAAD,OAAgB,6BAAMA,OAE1E,yCACcF,EAASG,QADvB,YAGA,6BACI,yBAAKd,IAAKW,EAASV,MAAQU,EAASV,MAAMC,OAAS,2DAA4DC,IAAI,UCb1HY,EAAb,2MAEIC,MAAQ,CACJL,SAAU,IAHlB,mFAMyB,IAAD,OAChBM,MAAM,+BAAiCC,KAAKC,MAAMC,MAAMC,OAAOxB,IAC1DyB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GAAG,OAAI,EAAKE,SAAS,CAAEd,SAAUY,SATnD,+BAaQ,OACI,kBAAC,EAAD,CAAcZ,SAAUO,KAAKF,MAAML,eAd/C,GAA0Be,IAAMC,W,eCwDjBC,E,2MA5CbZ,MAAe,CACblC,MAAO,GACP2B,UAAW,I,EAGb1B,SAAW,SAACD,GACV,EAAK2C,SAAS,CAAE3C,MAAOA,IACvBmC,MAAM,wCAA0CnC,GAC7CwC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GAAG,OAAI,EAAKE,SAChB,CACEhB,UAAWc,EAAIjB,KAAI,SAACb,GAClB,MAAO,CACLM,MAAON,EAAKM,MACZF,GAAIJ,EAAKA,KAAKI,GACdC,KAAML,EAAKA,KAAKK,KAChBG,MAAOR,EAAKA,KAAKQ,gB,wEAQnB,IAAD,OAEP,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO4B,KAAK,QAAQC,OAAQ,gBAAGpC,EAAH,EAAGA,QAAH,OAC1B,kBAAC,EAAD,CAAMZ,MAAO,EAAKkC,MAAMlC,MAAOC,SAAU,EAAKA,SAAU0B,UAAW,EAAKO,MAAMP,UAAWf,QAASA,OAGpG,kBAAC,IAAD,CAAOmC,KAAK,aAAaC,OAAQ,gBAAGV,EAAH,EAAGA,MAAH,OAC/B,kBAAC,EAAD,CAAMX,UAAW,EAAKO,MAAMP,UAAWW,MAAOA,OAGhD,kBAAC,IAAD,CAAUW,GAAG,gB,GAvCLL,IAAMC,WCTJK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASf,MACvB,2DCZNgB,IAASN,OAAO,kBAAC,EAAD,MAASO,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,MAAK,SAAAoB,GACjCA,EAAaC,kB","file":"static/js/main.f87d29b4.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Header.css'\r\n\r\n\r\nexport interface Iprops {\r\n    query: string,\r\n    setQuery(input: string): void,\r\n}\r\n\r\nexport const Header: React.FC<Iprops> = ({ query, setQuery }) => {\r\n\r\n    return (\r\n        < div className=\"header\">\r\n            <input\r\n                role=\"input\"\r\n                type=\"search\"\r\n                placeholder=\"search\"\r\n                value={query}\r\n                onChange={(e) => setQuery(e.target.value)}\r\n            />\r\n        </div >\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\nimport './Tile.css'\r\n\r\n\r\nexport interface IProps {\r\n    show: {\r\n        id: string,\r\n        name: string,\r\n        score: number,\r\n        image?: {\r\n            medium?: string\r\n        },\r\n    },\r\n    history: any\r\n}\r\n\r\nexport const Tile: React.FC<IProps> = ({ show, history }) => {\r\n    return (\r\n        < div role=\"button\" className=\"tile\" onClick={() => history.push(`/shows/${show.id}`)}>\r\n            <div>\r\n                {show.id}\r\n            </div>\r\n            <div>\r\n                {show.name}\r\n            </div>\r\n            <div>\r\n                {show.score}\r\n            </div>\r\n            <div>\r\n                <img src={show.image ? show.image.medium : \"https://openphoto.net/volumes/sizes/sarabbit/21978/2.jpg\"} alt=\"\" />\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\n// const TileStyled = styledts<TileProps>(styledts.div)``\r\n","import React from 'react'\r\nimport { Tile } from '../Tile/Tile';\r\nimport './List.css'\r\ninterface Props {\r\n    shows: any;\r\n    history: any;\r\n}\r\n\r\nexport const List: React.FC<Props> = ({ shows, history }) => {\r\n\r\n    return <div className=\"list\">\r\n        {shows && shows.map((show: any) =>\r\n            <Tile\r\n                history={history}\r\n                key={show.id}\r\n                show={show}>\r\n                {/* {show.title} */}\r\n            </Tile>\r\n        )}\r\n    </div>\r\n}\r\n\r\n// import { Tile } from '../Tile/Tile';\r\n// import { showData } from '../../App'\r\n\r\n// export interface Iprops {\r\n//     showsData: showData[],\r\n// }\r\n\r\n// export const List: React.FC<Iprops> = ({ showsData }) => {\r\n//     return (\r\n//         < div >\r\n//             {showsData.map(() => {\r\n//                 <Tile\r\n\r\n//                     >\r\n\r\n//                 </Tile>\r\n//             })}\r\n//         </div >\r\n//     )\r\n// }\r\n\r\n// // const ListStyled = styledts<ListProps>(styledts.div)``\r\n","import React from 'react'\r\nimport { Header } from '../components/Header/Header';\r\nimport { List } from '../components/List/List';\r\n\r\n\r\ninterface Props {\r\n    query: string;\r\n    setQuery: any;\r\n    showsData: any;\r\n    history: any;\r\n}\r\n\r\nexport const Home: React.FC<Props> = ({ query, setQuery, showsData, history }) => {\r\n    return (\r\n        <div>\r\n            <Header query={query} setQuery={setQuery}></Header>\r\n            <List shows={showsData} history={history}></List>\r\n        </div>\r\n    );\r\n}","import React from 'react'\r\nimport './TileExtended.css'\r\n\r\nexport interface TileExtendedProps {\r\n    showData: any\r\n}\r\n\r\nexport const TileExtended: React.FC<TileExtendedProps> = ({ showData }) => {\r\n    return (\r\n        < div className=\"tileExtended\">\r\n            <div className=\"card\">\r\n                <div>\r\n                    {showData.id}\r\n                </div>\r\n                <div>\r\n                    {showData.name}\r\n                </div>\r\n                <div>\r\n                    genres: {showData.genres && showData.genres.map((genre: any) => <div>{genre}</div>)}\r\n                </div>\r\n                <div>\r\n                    runtime: {showData.runtime} minutes\r\n                </div>\r\n                <div>\r\n                    <img src={showData.image ? showData.image.medium : \"https://openphoto.net/volumes/sizes/sarabbit/21978/2.jpg\"} alt=\"\" />\r\n                </div>\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\nimport { TileExtended } from '../components/TileExtended/TileExtended'\r\n\r\ninterface Props {\r\n    showsData: any,\r\n    match?: any\r\n}\r\ninterface State {\r\n    showData: any,\r\n}\r\n\r\nexport class Show extends React.Component<Props, State> {\r\n\r\n    state = {\r\n        showData: {},\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(\"http://api.tvmaze.com/shows/\" + this.props.match.params.id)\r\n            .then(res => res.json())\r\n            .then(res => this.setState({ showData: res }))\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <TileExtended showData={this.state.showData}></TileExtended>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\n// import styled from 'styled-components';\nimport { Home } from './routes/Home';\nimport { Show } from './routes/Show';\n\nimport { HashRouter as Router, Switch, Route, Redirect } from 'react-router-dom'\n\nexport interface State {\n  query: string,\n  showsData: showData[],\n}\n\nexport interface Props {\n}\n\nexport interface showData {\n  id: number,\n  name: string,\n\n}\n  \nclass App extends React.Component<Props, State> {\n\n  state: State = {\n    query: \"\",\n    showsData: [],\n  }\n\n  setQuery = (query: string) => {\n    this.setState({ query: query });\n    fetch(\"http://api.tvmaze.com/search/shows?q=\" + query)\n      .then(res => res.json())\n      .then(res => this.setState(\n        {\n          showsData: res.map((show: any) => {\n            return {\n              score: show.score,\n              id: show.show.id,\n              name: show.show.name,\n              image: show.show.image,\n            }\n          })\n        }\n      ))\n  }\n\n\n  render() {\n\n    return (\n      <Router>\n        <Switch>\n          <Route path=\"/home\" render={({ history }: any) =>\n            <Home query={this.state.query} setQuery={this.setQuery} showsData={this.state.showsData} history={history}></Home>\n          }>\n          </Route>\n          <Route path=\"/shows/:id\" render={({ match }: any) =>\n            <Show showsData={this.state.showsData} match={match}></Show>\n          }>\n          </Route>\n          <Redirect to=\"/home\"></Redirect>\n        </Switch>\n      </Router >\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}